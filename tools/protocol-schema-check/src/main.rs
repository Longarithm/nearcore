#![allow(unused_imports)]
/// Needed for `inventory`, helps to register all `ProtocolStruct`-ed structs.
/// This is needed to be able to iterate over all structs and check their
/// hashes.
/// Iteration is done by `ProtocolStructInfo`s generated by `ProtocolStruct`
/// macro.
// TODO (#11755): add to CI.
use near_primitives::*;

use near_structs_checker_core::ProtocolStructInfo;
use std::any::TypeId;
use std::collections::hash_map::DefaultHasher;
use std::collections::{BTreeMap, HashMap, HashSet};
use std::fs;
use std::hash::{Hash, Hasher};
use std::path::Path;

fn compute_hash(
    info: &ProtocolStructInfo,
    structs: &HashMap<TypeId, &'static ProtocolStructInfo>,
) -> u32 {
    let mut hasher = DefaultHasher::new();
    match info {
        ProtocolStructInfo::Struct { name, type_id, fields } => {
            name.hash(&mut hasher);
            type_id.hash(&mut hasher);
            for (field_name, field_type_id) in *fields {
                field_name.hash(&mut hasher);
                compute_type_hash(*field_type_id, structs, &mut hasher);
            }
        }
        ProtocolStructInfo::Enum { name, type_id, variants } => {
            name.hash(&mut hasher);
            type_id.hash(&mut hasher);
            for (variant_name, variant_fields) in *variants {
                variant_name.hash(&mut hasher);
                if let Some(fields) = variant_fields {
                    for (field_name, field_type_id) in *fields {
                        field_name.hash(&mut hasher);
                        compute_type_hash(*field_type_id, structs, &mut hasher);
                    }
                }
            }
        }
    }
    hasher.finish() as u32
}

fn compute_type_hash(
    type_id: TypeId,
    structs: &HashMap<TypeId, &'static ProtocolStructInfo>,
    hasher: &mut DefaultHasher,
) {
    if let Some(nested_info) = structs.get(&type_id) {
        compute_hash(nested_info, structs).hash(hasher);
    } else {
        // Likely a primitive or external type, hash the type_id directly.
        // TODO (#11755): proper implementation for generics. Or require a
        // separate type for them.
        type_id.hash(hasher);
    }
}

fn main() {
    let file_path = Path::new(env!("CARGO_MANIFEST_DIR")).join("res").join("protocol_structs.toml");

    let stored_hashes: BTreeMap<String, u32> = if file_path.exists() {
        toml::from_str(&fs::read_to_string(&file_path).unwrap_or_else(|_| "".to_string())).unwrap()
    } else {
        BTreeMap::new()
    };

    let structs: HashMap<TypeId, &'static ProtocolStructInfo> =
        inventory::iter::<ProtocolStructInfo>
            .into_iter()
            .map(|info| (info.type_id(), info))
            .collect();
    println!("Loaded {} structs", structs.len());

    let mut current_hashes = BTreeMap::new();
    for info in inventory::iter::<ProtocolStructInfo> {
        let hash = compute_hash(info, &structs);
        current_hashes.insert(info.name().to_string(), hash);
    }

    let mut has_changes = false;
    for (name, hash) in &current_hashes {
        match stored_hashes.get(name) {
            Some(stored_hash) if stored_hash != hash => {
                println!("Hash mismatch for {}: stored {}, current {}", name, stored_hash, hash);
                has_changes = true;
            }
            None => {
                println!("New struct: {} with hash {}", name, hash);
                has_changes = true;
            }
            _ => {}
        }
    }

    let current_keys: HashSet<_> = current_hashes.keys().collect();
    let stored_keys: HashSet<_> = stored_hashes.keys().collect();
    for removed in stored_keys.difference(&current_keys) {
        println!("Struct removed: {}", removed);
        has_changes = true;
    }

    if has_changes {
        fs::write(&file_path, toml::to_string_pretty(&current_hashes).unwrap()).unwrap();
        println!("Updated {}", file_path.display());
    } else {
        println!("No changes detected in protocol structs");
    }
}
